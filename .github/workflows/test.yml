name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Manuel çalıştırma için

env:
  NODE_VERSION: '18'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres123
  POSTGRES_DB: express_api_test_db

jobs:
  test:
    name: 🚀 Run Tests
    runs-on: ubuntu-latest
    
    services:
      # PostgreSQL Database
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      # Redis (isteğe bağlı)
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      


    steps:
      # 1. Checkout Code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Install Dependencies
      - name: 📦 Install Dependencies
        run: |
          npm ci
          echo "✅ Dependencies installed"

      # 4. Environment Setup
      - name: 🌍 Setup Environment Variables
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "PORT=3001" >> $GITHUB_ENV
          echo "JWT_SECRET=github-actions-test-secret" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=github-actions-refresh-secret" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}?schema=public" >> $GITHUB_ENV
          echo "MAIL_FROM_ADDRESS=test@halisaha.app" >> $GITHUB_ENV
          echo "MAIL_FROM_NAME=Halısaha Test" >> $GITHUB_ENV
          echo "MINIO_ENDPOINT=localhost" >> $GITHUB_ENV
          echo "MINIO_PORT=9000" >> $GITHUB_ENV
          echo "MINIO_USE_SSL=false" >> $GITHUB_ENV
          echo "MINIO_ACCESS_KEY=minioadmin" >> $GITHUB_ENV
          echo "MINIO_SECRET_KEY=minioadmin123" >> $GITHUB_ENV
          echo "✅ Environment variables set"

      # 5. Database Migration
      - name: 🗄️ Database Setup
        run: |
          echo "📋 Running Prisma generate..."
          npx prisma generate
          
          echo "🔄 Running database migrations..."
          npx prisma db push --accept-data-loss
          
          echo "✅ Database setup completed"

             # 6. Start MinIO & Wait for Services  
       - name: ⏳ Setup MinIO & Wait for Services
         run: |
           echo "🗄️ Starting MinIO server..."
           docker run -d --name minio-test \
             -p 9000:9000 -p 9001:9001 \
             -e MINIO_ROOT_USER=minioadmin \
             -e MINIO_ROOT_PASSWORD=minioadmin123 \
             minio/minio server /data --console-address ":9001"
           
           echo "🔍 Waiting for PostgreSQL..."
           until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
             echo "Waiting for PostgreSQL..."
             sleep 2
           done
           echo "✅ PostgreSQL ready"
           
           echo "🔍 Waiting for Redis..."
           until redis-cli -h localhost -p 6379 ping; do
             echo "Waiting for Redis..."
             sleep 2
           done
           echo "✅ Redis ready"
           
           echo "🔍 Waiting for MinIO..."
           sleep 10
           until curl -f http://localhost:9000/minio/health/live 2>/dev/null; do
             echo "Waiting for MinIO..."
             sleep 3
           done
           echo "✅ MinIO ready"

      # 7. Build Project
      - name: 🔨 Build Project
        run: |
          npm run build
          echo "✅ Project built successfully"

             # 8. Run Tests
       - name: 🧪 Run Tests
         run: |
           echo "🚀 Running all tests..."
           npm run test:ci
           echo "✅ Tests completed"

             # 9. API Health Check
       - name: 🏥 API Health Check
         run: |
           echo "🚀 Starting server for health check..."
           npm start &
           SERVER_PID=$!
           
           echo "⏳ Waiting for server to start..."
           sleep 10
           
           echo "🔍 Checking API health..."
           curl -f http://localhost:3001/health || (echo "❌ Health check failed" && exit 1)
           
           echo "🛑 Stopping server..."
           kill $SERVER_PID
           echo "✅ API health check passed"

       # 10. Forget Password API Test
      - name: 🔐 Test Forget Password Feature
        run: |
          echo "🚀 Starting server for Forget Password test..."
          npm start &
          SERVER_PID=$!
          
          echo "⏳ Waiting for server..."
          sleep 10
          
          echo "📧 Testing forgot password endpoint..."
          RESPONSE=$(curl -s -X POST http://localhost:3001/api/v1/auth/forgot-password \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com"}')
          
          echo "📝 Response: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "✅ Forgot password test passed"
          else
            echo "❌ Forgot password test failed"
            kill $SERVER_PID
            exit 1
          fi
          
          echo "🛑 Stopping server..."
          kill $SERVER_PID
          echo "✅ Forget Password feature test completed"

             # 11. Upload Coverage
       - name: 📊 Upload Coverage to Codecov
         uses: codecov/codecov-action@v3
         with:
           token: ${{ secrets.CODECOV_TOKEN }}
           file: ./coverage/lcov.info
           fail_ci_if_error: false
           verbose: true

       # 12. Upload Test Results
       - name: 📋 Upload Test Results
         uses: actions/upload-artifact@v4
         if: always()
         with:
           name: test-results
           path: |
             coverage/
             junit.xml
           retention-days: 30

  # Lint Job (Paralel çalışacak)
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

             - name: 🔍 Run ESLint
         run: |
           echo "🔍 Running ESLint..."
           echo "⚠️ ESLint temporarily disabled - will be configured later"

             - name: 🎨 Run Prettier Check
         run: |
           echo "🎨 Checking code formatting..."
           echo "⚠️ Prettier check temporarily disabled - will be configured later"

      - name: 🔒 Run Security Audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level high

  # Deploy Job (sadece main branch için)
  deploy:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "✅ Deployment simulation completed"
          # Gerçek deployment komutları buraya eklenecek

  # Notification Job
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()
    
    steps:
      - name: 📢 Send Notification
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ All tests passed! 🎉"
            echo "📧 Sending success notification..."
          else
            echo "❌ Some tests failed! 😞"
            echo "📧 Sending failure notification..."
          fi 