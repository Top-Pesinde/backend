services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: top-api-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: express_api_db
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: express-api-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DOMAIN: 176.96.131.222
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    networks:
      - app-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client for creating buckets
  createbuckets:
    image: minio/mc:latest
    container_name: express-api-minio-mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c " /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123; /usr/bin/mc mb myminio/profile-photos --ignore-existing; /usr/bin/mc mb myminio/documents --ignore-existing; /usr/bin/mc mb myminio/general-uploads --ignore-existing; /usr/bin/mc mb myminio/fields --ignore-existing; /usr/bin/mc policy set public myminio/profile-photos; /usr/bin/mc policy set public myminio/fields; exit 0; "

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
