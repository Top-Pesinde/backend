const io = require('socket.io-client');

// Test: 5 saniye sonra bildirim sistemi
async function testDelayedNotification() {
    console.log('üß™ 5 Saniye Sonra Bildirim Testi Ba≈ülƒ±yor...');
    
    // User1 - Mesaj g√∂nderen
    const user1Token = await getToken('sockettest1', '123456');
    const user1Socket = io('http://localhost:3000', {
        auth: { token: user1Token }
    });
    
    // User2 - Mesaj alan (bildirim alacak)
    const user2Token = await getToken('sockettest2', '123456');
    const user2Socket = io('http://localhost:3000', {
        auth: { token: user2Token }
    });
    
    // User1 baƒülantƒ±sƒ±
    user1Socket.on('connect', () => {
        console.log('üîå User1 baƒülandƒ±');
        
        // Konu≈ümaya katƒ±l
        user1Socket.emit('join_conversation', { 
            conversationId: 'cmdc5v9w9000bo165nvptez6z' 
        });
    });
    
    // User2 baƒülantƒ±sƒ±
    user2Socket.on('connect', () => {
        console.log('üîå User2 baƒülandƒ±');
        
        // Konu≈ümaya katƒ±lma (mesajlarƒ± otomatik okundu yapmamak i√ßin)
        // user2Socket.emit('join_conversation', { 
        //     conversationId: 'cmdc5v9w9000bo165nvptez6z' 
        // });
    });
    
    // User2: Yeni mesaj geldiƒüinde
    user2Socket.on('new_chat_message', (data) => {
        console.log('üì© User2: Yeni mesaj alƒ±ndƒ±:', data.message.content);
        console.log('‚è≥ User2: Mesajƒ± OKUMUYORUM (5 saniye bekleyeceƒüim)');
        
        // Mesajƒ± OKUMUYORUZ - bildirim gelmeli
        // setTimeout(() => {
        //     user2Socket.emit('mark_messages_read', { 
        //         conversationId: data.message.conversationId 
        //     });
        // }, 2000);
    });
    
    // User2: 5 saniye sonra bildirim geldiƒüinde
    user2Socket.on('message_notification', (data) => {
        console.log('\nüîî ===== Bƒ∞LDƒ∞Rƒ∞M ALINDI! =====');
        console.log('üì± Bildirim Tipi:', data.type);
        console.log('üë§ G√∂nderen:', data.senderName);
        console.log('üí¨ Mesaj:', data.content);
        console.log('üÜî Mesaj ID:', data.messageId);
        console.log('‚è∞ Zaman:', new Date(data.timestamp).toLocaleString());
        console.log('================================\n');
    });
    
    // User1: Mesaj g√∂nderildiƒüinde
    user1Socket.on('message_sent_success', (data) => {
        console.log('üì§ User1: Mesaj g√∂nderildi:', data.message.content);
        console.log('‚è∞ User1: 5 saniye sonra bildirim g√∂nderilecek (eƒüer okunmazsa)');
    });
    
    // 2 saniye sonra test mesajƒ± g√∂nder
    setTimeout(() => {
        const testMessage = `Test mesajƒ± - ${new Date().toLocaleTimeString()}`;
        console.log('üì® User1: Test mesajƒ± g√∂nderiliyor:', testMessage);
        
        user1Socket.emit('send_chat_message', {
            receiverId: 'cmdc5or7q0002o1jwmldqzulb', // User2 ID
            content: testMessage,
            messageType: 'TEXT'
        });
    }, 2000);
    
    // Test senaryolarƒ±
    setTimeout(() => {
        console.log('\nüìã TEST SENARYOLARI:');
        console.log('1. ‚úÖ Mesaj g√∂nderildi');
        console.log('2. ‚è≥ User2 mesajƒ± OKUMADI');
        console.log('3. ‚è∞ 5 saniye bekleniyor...');
        console.log('4. üîî Bildirim gelecek!');
    }, 3000);
    
    // 15 saniye sonra test'i bitir
    setTimeout(() => {
        console.log('\nüèÅ Test tamamlandƒ±');
        user1Socket.disconnect();
        user2Socket.disconnect();
        process.exit(0);
    }, 15000);
}

// Test 2: Mesaj okunduƒüunda bildirim g√∂nderilmemesi
async function testNoNotificationWhenRead() {
    console.log('üß™ Okundu Mesaj ƒ∞√ßin Bildirim Yok Testi...');
    
    const user1Token = await getToken('sockettest1', '123456');
    const user1Socket = io('http://localhost:3000', {
        auth: { token: user1Token }
    });
    
    const user2Token = await getToken('sockettest2', '123456');
    const user2Socket = io('http://localhost:3000', {
        auth: { token: user2Token }
    });
    
    user1Socket.on('connect', () => {
        console.log('üîå User1 baƒülandƒ±');
        user1Socket.emit('join_conversation', { 
            conversationId: 'cmdc5v9w9000bo165nvptez6z' 
        });
    });
    
    user2Socket.on('connect', () => {
        console.log('üîå User2 baƒülandƒ±');
        user2Socket.emit('join_conversation', { 
            conversationId: 'cmdc5v9w9000bo165nvptez6z' 
        });
    });
    
    // User2: Mesaj geldiƒüinde hemen oku
    user2Socket.on('new_chat_message', (data) => {
        console.log('üì© User2: Yeni mesaj alƒ±ndƒ±:', data.message.content);
        console.log('üìñ User2: Mesajƒ± HEMEN okuyorum');
        
        // Mesajƒ± hemen okundu olarak i≈üaretle
        setTimeout(() => {
            user2Socket.emit('mark_messages_read', { 
                conversationId: data.message.conversationId 
            });
            console.log('‚úÖ User2: Mesaj okundu olarak i≈üaretlendi');
        }, 1000);
    });
    
    // User2: Bildirim gelmemeli
    user2Socket.on('message_notification', (data) => {
        console.log('‚ùå HATA: Bildirim geldi ama gelmemeli!', data);
    });
    
    user1Socket.on('message_sent_success', (data) => {
        console.log('üì§ User1: Mesaj g√∂nderildi:', data.message.content);
        console.log('‚è∞ User1: 5 saniye sonra bildirim G√ñNDERƒ∞LMEMELƒ∞ (√ß√ºnk√º okunacak)');
    });
    
    setTimeout(() => {
        const testMessage = `Okunacak mesaj - ${new Date().toLocaleTimeString()}`;
        console.log('üì® User1: Test mesajƒ± g√∂nderiliyor:', testMessage);
        
        user1Socket.emit('send_chat_message', {
            receiverId: 'cmdc5or7q0002o1jwmldqzulb',
            content: testMessage,
            messageType: 'TEXT'
        });
    }, 2000);
    
    setTimeout(() => {
        console.log('\nüìã TEST SENARYOLARI:');
        console.log('1. ‚úÖ Mesaj g√∂nderildi');
        console.log('2. üìñ User2 mesajƒ± HEMEN okudu');
        console.log('3. ‚è∞ 5 saniye bekleniyor...');
        console.log('4. ‚ùå Bildirim G√ñNDERƒ∞LMEMELƒ∞!');
    }, 3000);
    
    setTimeout(() => {
        console.log('\nüèÅ Test tamamlandƒ± - Bildirim gelmedi ise ba≈üarƒ±lƒ±!');
        user1Socket.disconnect();
        user2Socket.disconnect();
        process.exit(0);
    }, 10000);
}

// JWT token alma fonksiyonu
async function getToken(username, password) {
    const response = await fetch('http://localhost:3000/api/v1/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
    });
    
    const data = await response.json();
    return data.data.accessToken;
}

// Ana fonksiyon
async function main() {
    const args = process.argv.slice(2);
    
    if (args[0] === 'test1') {
        await testDelayedNotification();
    } else if (args[0] === 'test2') {
        await testNoNotificationWhenRead();
    } else {
        console.log('Kullanƒ±m:');
        console.log('  node test-delayed-notification.js test1  # 5 saniye sonra bildirim testi');
        console.log('  node test-delayed-notification.js test2  # Okundu mesaj i√ßin bildirim yok testi');
    }
}

main().catch(console.error);