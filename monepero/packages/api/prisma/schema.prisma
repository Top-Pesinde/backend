// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  username      String    @unique
  email         String    @unique
  password      String?   // Google login için opsiyonel
  phone         String?   // Google login için opsiyonel
  location      String?
  bio           String?
  profilePhoto  String?   @map("profile_photo")
  lisans        Boolean   @default(false)
  role          Role      @default(USER)
  subscription  Boolean   @default(false) @map("subscription")
  resetToken    String?   @map("reset_token")
  resetTokenExpires DateTime? @map("reset_token_expires")
  googleId      String?   @unique @map("google_id") // Google kimlik doğrulama için
  appleId       String?   @unique @map("apple_id")  // Apple Sign In için
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  documents          Document[]
  fieldListings      FieldListing[]
  goalkeeperListings GoalkeeperListing[]
  refereeListings    RefereeListing[]
  fcmTokens          FcmToken[]
  userSessions       UserSession[]
  sentOffers         GoalkeeperOffer[]  @relation("OfferFromUser") // Gönderdiği kaleci teklifleri
  receivedOffers     GoalkeeperOffer[]  @relation("OfferToUser")   // Aldığı kaleci teklifleri
  sentRefereeOffers  RefereeOffer[]     @relation("RefereeOfferFromUser") // Gönderdiği hakem teklifleri
  receivedRefereeOffers RefereeOffer[]  @relation("RefereeOfferToUser")   // Aldığı hakem teklifleri
  status             Boolean            @default(true)
  
  // Chat ilişkileri
  sentMessages        Message[]          @relation("MessageSender")
  receivedMessages    Message[]          @relation("MessageReceiver")
  conversations1      Conversation[]     @relation("ConversationUser1")
  conversations2      Conversation[]     @relation("ConversationUser2")
  blockedUsers        UserBlock[]        @relation("BlockedByUser")
  blockedByUsers      UserBlock[]        @relation("BlockedUser")

  @@map("users")
}

model Document {
  id        String   @id @default(cuid())
  fileName  String   @map("file_name")
  fileType  String   @map("file_type")
  filePath  String   @map("file_path")
  fileSize  Int      @map("file_size")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("documents")
}

model FieldListing {
  id               String          @id @default(cuid())
  userId           String          @map("user_id")
  fieldName        String          @map("field_name")
  fieldAddress     String          @map("field_address")
  hourlyPrice      Decimal         @map("hourly_price") @db.Decimal(10, 2)
  isIndoor         Boolean         @map("is_indoor")
  surfaceType      SurfaceType     @map("surface_type")
  phone            String?
  contactType      ContactType?    @map("contact_type")
  description      String?
  isActive         Boolean         @default(true) @map("is_active")
  featured         Boolean         @default(false) // Öne çıkan ilan
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules        FieldSchedule[]
  features         FieldFeature[]
  photos           FieldPhoto[]
  subFields        SubField[]

  @@map("field_listings")
}

model SubField {
  id            String       @id @default(cuid())
  fieldListingId String      @map("field_listing_id")
  name          String
  surfaceType   SurfaceType  @map("surface_type")
  hourlyPrice   Decimal      @map("hourly_price") @db.Decimal(10, 2)
  isIndoor      Boolean      @map("is_indoor")
  
  fieldListing  FieldListing @relation(fields: [fieldListingId], references: [id], onDelete: Cascade)

  @@map("sub_fields")
}

model FieldSchedule {
  id             String       @id @default(cuid())
  fieldListingId String       @map("field_listing_id")
  dayOfWeek      DayOfWeek    @map("day_of_week")
  startTime      String?      @map("start_time") // Format: "HH:MM" - nullable for closed days
  endTime        String?      @map("end_time")   // Format: "HH:MM" - nullable for closed days
  isOpen         Boolean      @default(true)     // false means closed/holiday
  
  fieldListing   FieldListing @relation(fields: [fieldListingId], references: [id], onDelete: Cascade)

  @@map("field_schedules")
}

model FieldFeature {
  id             String       @id @default(cuid())
  fieldListingId String       @map("field_listing_id")
  featureType    FeatureType  @map("feature_type")
  
  fieldListing   FieldListing @relation(fields: [fieldListingId], references: [id], onDelete: Cascade)

  @@unique([fieldListingId, featureType])
  @@map("field_features")
}

model FieldPhoto {
  id             String       @id @default(cuid())
  fieldListingId String       @map("field_listing_id")
  photoUrl       String       @map("photo_url")
  photoOrder     Int          @map("photo_order")
  
  fieldListing   FieldListing @relation(fields: [fieldListingId], references: [id], onDelete: Cascade)

  @@map("field_photos")
}

model GoalkeeperListing {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  title       String      // İlan Başlığı
  location    String      // Konum
  description String      // Açıklama
  hasLicense  Boolean     @map("has_license") @default(false) // Lisans seçeneği
  hourlyPrice Decimal     @map("hourly_price") @db.Decimal(10, 2) // Saatlik ücret
  bio         String?     // Kendini anlatan yazı
  phone       String?
  contactType ContactType? @map("contact_type") @default(PHONE)
  isActive    Boolean     @default(true) @map("is_active")
  featured    Boolean     @default(false) // Öne çıkan ilan
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  offers      GoalkeeperOffer[] // Bu ilana gelen teklifler

  @@map("goalkeeper_listings")
}

model RefereeListing {
  id          String       @id @default(cuid())
  userId      String       @map("user_id")
  title       String       // İlan Başlığı
  location    String       // Konum
  description String       // Açıklama
  hasLicense  Boolean      @map("has_license") @default(false) // Lisans seçeneği
  hourlyPrice Decimal      @map("hourly_price") @db.Decimal(10, 2) // Saatlik ücret
  bio         String?      // Kendini anlatan yazı (artık opsiyonel)
  phone       String?      // Artık opsiyonel
  contactType ContactType? @map("contact_type") // Artık opsiyonel
  isActive    Boolean      @default(true) @map("is_active")
  featured    Boolean      @default(false) // Öne çıkan ilan
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  offers      RefereeOffer[] // Bu ilana gelen teklifler

  @@map("referee_listings")
}

model GoalkeeperOffer {
  id               String           @id @default(cuid())
  listingId        String           @map("listing_id")
  offerFromUserId  String           @map("offer_from_user_id") // Teklifi gönderen kullanıcı
  offerToUserId    String           @map("offer_to_user_id")   // İlan sahibi (kaleci)
  matchDate        DateTime         @map("match_date")         // Maç tarihi
  startTime        String           @map("start_time")         // Başlangıç saati (HH:MM)
  endTime          String           @map("end_time")           // Bitiş saati (HH:MM)
  location         String           // Maç konumu
  description      String?          // Ek açıklama
  offeredPrice     Decimal          @map("offered_price") @db.Decimal(10, 2) // Teklif edilen ücret
  status           OfferStatus      @default(PENDING)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  
  listing          GoalkeeperListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  offerFromUser    User             @relation("OfferFromUser", fields: [offerFromUserId], references: [id], onDelete: Cascade)
  offerToUser      User             @relation("OfferToUser", fields: [offerToUserId], references: [id], onDelete: Cascade)

  @@map("goalkeeper_offers")
}

model RefereeOffer {
  id               String           @id @default(cuid())
  listingId        String           @map("listing_id")
  offerFromUserId  String           @map("offer_from_user_id") // Teklifi gönderen kullanıcı
  offerToUserId    String           @map("offer_to_user_id")   // İlan sahibi (hakem)
  matchDate        DateTime         @map("match_date")         // Maç tarihi
  startTime        String           @map("start_time")         // Başlangıç saati (HH:MM)
  endTime          String           @map("end_time")           // Bitiş saati (HH:MM)
  location         String           // Maç konumu
  description      String?          // Ek açıklama
  offeredPrice     Decimal          @map("offered_price") @db.Decimal(10, 2) // Teklif edilen ücret
  status           OfferStatus      @default(PENDING)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  
  listing          RefereeListing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  offerFromUser    User             @relation("RefereeOfferFromUser", fields: [offerFromUserId], references: [id], onDelete: Cascade)
  offerToUser      User             @relation("RefereeOfferToUser", fields: [offerToUserId], references: [id], onDelete: Cascade)

  @@map("referee_offers")
}

model FcmToken {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  token     String      @unique // FCM token benzersiz olmalı
  platform  Platform    // iOS, Android, Web
  deviceId  String?     @map("device_id") // Cihaz ID (optional)
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, deviceId]) // Aynı kullanıcıdan aynı cihaz sadece bir token
  @@map("fcm_tokens")
}

model UserSession {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  sessionToken   String    @unique @map("session_token") // JWT jti claim'i
  deviceInfo     String?   @map("device_info") // User-Agent ve cihaz bilgileri
  ipAddress      String?   @map("ip_address") // IP adresi
  location       String?   // Şehir/ülke bilgisi
  platform       Platform? // iOS, Android, Web
  isActive       Boolean   @default(true) @map("is_active")
  lastAccessedAt DateTime  @default(now()) @map("last_accessed_at")
  expiresAt      DateTime  @map("expires_at") // Token sona erme zamanı
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isActive]) // Kullanıcının aktif session'larını hızlı getirmek için
  @@index([sessionToken]) // Token ile arama için
  @@index([expiresAt]) // Süresi dolmuş session'ları temizlemek için
  @@map("user_sessions")
}

enum Role {
  USER
  GOALKEEPER
  REFEREE
  FOOTBALL_FIELD_OWNER
  ADMIN
}

enum SurfaceType {
  GRASS          // Çim
  ARTIFICIAL     // Suni Çim
  CONCRETE       // Beton
  CARPET         // Halı
}

enum ContactType {
  PHONE
  WHATSAPP
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Platform {
  IOS
  ANDROID
  WEB
}

enum FeatureType {
  // Teknik Özellikler
  OPEN_24_7           // 7/24 Açık
  ONLINE_RESERVATION  // Online Rezervasyon
  FREE_WIFI           // Ücretsiz Wifi
  SECURITY_CAMERA     // Güvenlik Kamerası
  
  // Olanaklar
  CHANGING_ROOM       // Soyunma Odası
  SHOWER              // Duş
  TOILET              // Tuvalet
  PARKING             // Otopark
  CAFE                // Kafe
  TRIBUNE             // Tribün
  RENTAL_SHOES        // Kiralık Ayakkabı
  RENTAL_GLOVES       // Kiralık Eldiven
}

enum OfferStatus {
  PENDING    // Beklemede
  ACCEPTED   // Kabul edildi
  REJECTED   // Reddedildi
  CANCELLED  // İptal edildi
}

// Chat modelleri
model Conversation {
  id           String    @id @default(cuid())
  user1Id      String    @map("user1_id")
  user2Id      String    @map("user2_id")
  lastMessage  String?   @map("last_message")
  lastMessageAt DateTime? @map("last_message_at")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  user1        User      @relation("ConversationUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2        User      @relation("ConversationUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  messages     Message[]
  
  @@unique([user1Id, user2Id])
  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String        @map("conversation_id")
  senderId       String        @map("sender_id")
  receiverId     String        @map("receiver_id")
  content        String
  messageType    MessageType   @default(TEXT) @map("message_type")
  isRead         Boolean       @default(false) @map("is_read")
  readAt         DateTime?     @map("read_at")
  isEdited       Boolean       @default(false) @map("is_edited")
  editedAt       DateTime?     @map("edited_at")
  isDeleted      Boolean       @default(false) @map("is_deleted")
  deletedAt      DateTime?     @map("deleted_at")
  replyToId      String?       @map("reply_to_id") // Yanıt verilen mesaj
  attachmentUrl  String?       @map("attachment_url") // Dosya/resim eki
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User          @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  replyTo        Message?      @relation("MessageReply", fields: [replyToId], references: [id])
  replies        Message[]     @relation("MessageReply")
  
  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
}

model UserBlock {
  id           String   @id @default(cuid())
  blockedById  String   @map("blocked_by_id") // Engelleyen kullanıcı
  blockedUserId String  @map("blocked_user_id") // Engellenen kullanıcı
  reason       String?  // Engelleme sebebi
  createdAt    DateTime @default(now()) @map("created_at")
  
  blockedBy    User     @relation("BlockedByUser", fields: [blockedById], references: [id], onDelete: Cascade)
  blockedUser  User     @relation("BlockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)
  
  @@unique([blockedById, blockedUserId])
  @@map("user_blocks")
}

enum MessageType {
  TEXT        // Metin mesajı
  IMAGE       // Resim
  FILE        // Dosya
  VOICE       // Ses kaydı
  LOCATION    // Konum
  OFFER       // Teklif mesajı
}